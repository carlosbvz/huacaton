{"version":3,"sources":["components/Header.js","layouts/DefaultLayout.js","pages/home.js","history.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","color","fontSize","&:hover, &:focus","Header","classes","react_default","a","createElement","className","AppBar","position","Toolbar","react_router_dom","to","main","padding","DefaultLayout","_ref","children","Fragment","Container","maxWidth","Home","_useState","useState","_useState2","Object","slicedToArray","setEvents","useEffect","axios","get","then","data","Button","variant","onClick","post","name","description","props","ListItem","assign","button","component","href","ListItemText","primary","createBrowserHistory","App","react_router","history","exact","path","HomePage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAMMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,EACVK,MAAO,QACPC,SAAU,GACVC,mBAAoB,CAClBF,MAAO,aAKE,SAASG,IACtB,IAAMC,EAAUb,IAEhB,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQV,MACtBW,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,IAAIL,UAAWJ,EAAQL,OAAhC,4BCzBJR,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCqB,KAAM,CACJC,QAAS,iBAIA,SAASC,EAATC,GAAqC,IAAZC,EAAYD,EAAZC,SAC9Bd,EAAUb,IAChB,OACIc,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACId,EAAAC,EAAAC,cAACJ,EAAD,MACAE,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,EAAQU,MACrBT,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWC,SAAS,MACfH,oCCXN,SAASI,IAAO,IAAAC,EAEDC,mBAAS,IAFRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEdK,GAFcH,EAAA,GAAAA,EAAA,IAI7BI,oBAAU,WACRC,IAAMC,IAAI,eACPC,KAAK,SAAAC,GACJL,EAAUK,EAAKA,SAElB,IAgBH,OACE5B,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAQC,QAAQ,YAAYnC,MAAM,YAAYoC,QAjB9B,WAClBN,IAAMO,KAAK,cAAe,CACxBC,KAAM,mBACNC,YAAa,0BAEZP,KAAK,SAAAC,QAYN,oBAGA5B,EAAAC,EAAAC,cAVJ,SAAsBiC,GACpB,OAAOnC,EAAAC,EAAAC,cAACkC,EAAA,EAADf,OAAAgB,OAAA,CAAUC,QAAM,EAACC,UAAU,KAAQJ,KASxC,CAAcK,KAAK,gBACjBxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAcC,QAAQ,sBCrCfC,gBCkBAC,0LAXX,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQC,QAASA,GACf9C,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOE,OAAK,EAACC,KAAK,IAAIT,UAAWU,aAPzBC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.ff02cf5c.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    color: 'white',\n    fontSize: 22,\n    \"&:hover, &:focus\": {\n      color: 'white',\n    }\n  },\n}))\n\nexport default function Header() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Link to=\"/\" className={classes.title}>Huacaton</Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Header from '../components/Header'\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles(theme => ({\n    main: {\n      padding: '30px 0 0 0'\n    }\n  }))\n\nexport default function DefaultLayout({ children }) {\n    const classes = useStyles()\n    return (\n        <>\n            <Header />\n            <main className={classes.main}>\n                <Container maxWidth=\"lg\">\n                    {children}\n                </Container>\n            </main>\n\n        </>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport axios from \"axios\"\nimport DefaultLayout from '../layouts/DefaultLayout'\nimport Button from '@material-ui/core/Button'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nexport default function Home() {\n\n  const [events, setEvents] = useState([])\n\n  useEffect(() => {\n    axios.get('/api/events')\n      .then(data => {\n        setEvents(data.data)\n      });\n  }, [])\n\n  const createEvent = () => {\n    axios.post('/api/events', {\n      name: 'Adding new event',\n      description: 'New event description'\n    })\n      .then(data => {\n        // Do something here\n      });\n  }\n\n  function ListItemLink(props) {\n    return <ListItem button component=\"a\" {...props} />;\n  }\n\n  return (\n    <DefaultLayout>\n      <p>Home Page</p>\n      <Button variant=\"contained\" color=\"secondary\" onClick={createEvent}>\n        Create new event\n      </Button>\n      <ListItemLink href=\"#simple-list\">\n        <ListItemText primary=\"Spam\" />\n      </ListItemLink>\n    </DefaultLayout>\n  )\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React from 'react'\nimport { Router, Route } from 'react-router-dom'\nimport HomePage from './pages/home'\nimport history from './history'\nimport './App.css'\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router history={history}>\n        <div >\n          {/* Routes */}\n          <Route exact path=\"/\" component={HomePage}></Route>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}